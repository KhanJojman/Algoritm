def calculate_max_value(s):
    n = len(s) // 2 + 1

    # Создаем таблицу размером (n+1) x (n+1)
    # table[i][j] будет содержать максимальное значение арифметического выражения из первых i символов строки s с использованием только j операций
    table = [[0] * (n + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        num = int(s[(i - 1) * 2])  # цифра на четной позиции i
        table[i][i] = num  # присваиваем значение текущей цифры

    for k in range(1, n):  # k - количество операций
        for i in range(1, n - k + 1):
            j = i + k  # i и j - индексы начала и конца текущей подстроки
            table[i][j] = -float(
                "inf"
            )  # инициализируем максимальное значение минус бесконечность

            for m in range(i, j):  # m - индекс операции в текущей подстроке
                op = s[m * 2 + 1]  # операция на нечетной позиции m
                if op == "+":
                    value = (
                        table[i][m] + table[m + 1][j]
                    )  # вычисляем значение для операции сложения
                elif op == "-":
                    value = (
                        table[i][m] - table[m + 1][j]
                    )  # вычисляем значение для операции вычитания
                elif op == "*":
                    value = (
                        table[i][m] * table[m + 1][j]
                    )  # вычисляем значение для операции умножения
                table[i][j] = max(table[i][j], value)  # выбираем максимальное значение

    return table[1][n]


# Ввод данных
s = input()

# Вычисление и вывод результата
max_value = calculate_max_value(s)
print(max_value)

# Не работает
